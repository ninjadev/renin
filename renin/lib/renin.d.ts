import { CanvasTexture, OrthographicCamera, Scene, ShaderMaterial, WebGLRenderer, WebGLRendererParameters, WebGLRenderTarget } from "three";
import { AudioBar } from "./ui/AudioBar";
import { Sync } from "./sync";
import { ReninNode } from "./ReninNode";
import { Music } from "./music";
import { UIAnimation } from "./ui/UIAnimation";
import { UIBox } from "./ui/UIBox";
export * as vite from "./ui/vite";
export * as ReninNode from "./ReninNode";
export declare const defaultVertexShader: string;
export interface Options {
    music: {
        src: string;
        bpm: number;
        subdivision: number;
        beatOffset: number;
    };
    root: ReninNode;
    productionMode: boolean;
    rendererOptions?: WebGLRendererParameters;
    toneMapping: WebGLRenderer["toneMapping"];
}
export declare class Renin {
    static instance: Renin;
    width: number;
    height: number;
    audioBar: AudioBar;
    music: Music;
    sync: Sync;
    frame: number;
    oldTime: number;
    time: number;
    dt: number;
    cuePoints: number[];
    uiNeedsRender: boolean;
    renderTimesCPU: number[];
    renderTimesCPUIndex: number;
    renderTimesGPU: number[];
    renderTimesGPUIndex: number;
    renderer: WebGLRenderer;
    demoRenderTarget: WebGLRenderTarget;
    screen: UIBox<ShaderMaterial>;
    framePanel: UIBox<import("three").MeshBasicMaterial>;
    performancePanel: UIBox<ShaderMaterial>;
    scene: Scene;
    camera: OrthographicCamera;
    root: ReninNode;
    screenRenderTarget: WebGLRenderTarget;
    isFullscreen: boolean;
    fullscreenAnimation: UIAnimation;
    uiOldTime: number;
    uiTime: number;
    uiDt: number;
    framePanelCanvas: HTMLCanvasElement;
    framePanelTexture: CanvasTexture;
    query: WebGLQuery | null;
    updateTimes: number[];
    updateTimesIndex: number;
    uiUpdateTimes: number[];
    uiUpdateTimesIndex: number;
    memoryPercentages: number[];
    memoryPercentagesIndex: number;
    queryIsActive: boolean;
    options: Options;
    constructor(options: Options);
    resize(width: number, height: number): void;
    register(newNode: ReninNode): void;
    loop: () => void;
    jumpToFrame(frame: number): void;
    update(frame: number): void;
    uiUpdate(): boolean;
    uiRender(): void;
    render(): void;
}
