var shadowShader = "varying vec2 vUv;\nuniform float width;\nuniform float height;\nuniform float shadowSize;\nuniform float shadowOpacity;\n\n// based off of https://madebyevan.com/shaders/fast-rounded-rectangle-shadows/\n\n// This approximates the error function, needed for the gaussian integral\nvec4 erf(vec4 x) {\n  vec4 s = sign(x), a = abs(x);\n  x = 1.0 + (0.278393 + (0.230389 + 0.078108 * (a * a)) * a) * a;\n  x *= x;\n  return s - s / (x * x);\n}\n\n// Return the mask for the shadow of a box from lower to upper\nfloat boxShadow(vec2 lower, vec2 upper, vec2 point, float sigma) {\n  vec4 query = vec4(point - lower, point - upper);\n  vec4 integral = 0.5 + 0.5 * erf(query * (sqrt(0.5) / sigma));\n  return (integral.z - integral.x) * (integral.w - integral.y);\n}\n\nvoid main() {\n    vec2 uv = (vUv - 0.5) * 2.;\n    float aspect = width / height;\n    uv.x *= aspect;\n    float padding = shadowSize / height;\n    float sigma = padding / 3.;\n    float t = boxShadow(vec2(-aspect,-1.) + padding, vec2(aspect, 1.) - padding,  uv, sigma);\n    gl_FragColor = vec4(0., 0., 0, shadowOpacity * pow(t, .5));\n}\n";

export { shadowShader as default };
